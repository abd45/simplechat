// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.22.0-devel
// 	protoc        v3.11.4
// source: simplechat.proto

package simplechat

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type Conversation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ping     string `protobuf:"bytes,1,opt,name=ping,proto3" json:"ping,omitempty"`
	Username string `protobuf:"bytes,2,opt,name=username,proto3" json:"username,omitempty"`
}

func (x *Conversation) Reset() {
	*x = Conversation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_simplechat_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Conversation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Conversation) ProtoMessage() {}

func (x *Conversation) ProtoReflect() protoreflect.Message {
	mi := &file_simplechat_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Conversation.ProtoReflect.Descriptor instead.
func (*Conversation) Descriptor() ([]byte, []int) {
	return file_simplechat_proto_rawDescGZIP(), []int{0}
}

func (x *Conversation) GetPing() string {
	if x != nil {
		return x.Ping
	}
	return ""
}

func (x *Conversation) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

type Acknowledge struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ack bool `protobuf:"varint,1,opt,name=ack,proto3" json:"ack,omitempty"`
}

func (x *Acknowledge) Reset() {
	*x = Acknowledge{}
	if protoimpl.UnsafeEnabled {
		mi := &file_simplechat_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Acknowledge) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Acknowledge) ProtoMessage() {}

func (x *Acknowledge) ProtoReflect() protoreflect.Message {
	mi := &file_simplechat_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Acknowledge.ProtoReflect.Descriptor instead.
func (*Acknowledge) Descriptor() ([]byte, []int) {
	return file_simplechat_proto_rawDescGZIP(), []int{1}
}

func (x *Acknowledge) GetAck() bool {
	if x != nil {
		return x.Ack
	}
	return false
}

type User struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Username string `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
}

func (x *User) Reset() {
	*x = User{}
	if protoimpl.UnsafeEnabled {
		mi := &file_simplechat_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *User) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*User) ProtoMessage() {}

func (x *User) ProtoReflect() protoreflect.Message {
	mi := &file_simplechat_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use User.ProtoReflect.Descriptor instead.
func (*User) Descriptor() ([]byte, []int) {
	return file_simplechat_proto_rawDescGZIP(), []int{2}
}

func (x *User) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

var File_simplechat_proto protoreflect.FileDescriptor

var file_simplechat_proto_rawDesc = []byte{
	0x0a, 0x10, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x0a, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x63, 0x68, 0x61, 0x74, 0x22, 0x3e,
	0x0a, 0x0c, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12,
	0x0a, 0x04, 0x70, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x69,
	0x6e, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x1f,
	0x0a, 0x0b, 0x41, 0x63, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x12, 0x10, 0x0a,
	0x03, 0x61, 0x63, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x61, 0x63, 0x6b, 0x22,
	0x22, 0x0a, 0x04, 0x55, 0x73, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e,
	0x61, 0x6d, 0x65, 0x32, 0xd1, 0x01, 0x0a, 0x0a, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x43, 0x68,
	0x61, 0x74, 0x12, 0x3b, 0x0a, 0x0c, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x55, 0x73,
	0x65, 0x72, 0x12, 0x10, 0x2e, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x63, 0x68, 0x61, 0x74, 0x2e,
	0x55, 0x73, 0x65, 0x72, 0x1a, 0x17, 0x2e, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x63, 0x68, 0x61,
	0x74, 0x2e, 0x41, 0x63, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x22, 0x00, 0x12,
	0x44, 0x0a, 0x0b, 0x53, 0x65, 0x6e, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x18,
	0x2e, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x76,
	0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x17, 0x2e, 0x73, 0x69, 0x6d, 0x70, 0x6c,
	0x65, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x41, 0x63, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67,
	0x65, 0x22, 0x00, 0x28, 0x01, 0x12, 0x40, 0x0a, 0x0e, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x10, 0x2e, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65,
	0x63, 0x68, 0x61, 0x74, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x1a, 0x18, 0x2e, 0x73, 0x69, 0x6d, 0x70,
	0x6c, 0x65, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x22, 0x00, 0x30, 0x01, 0x42, 0x28, 0x5a, 0x26, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x62, 0x64, 0x34, 0x35, 0x2f, 0x73, 0x69, 0x6d, 0x70,
	0x6c, 0x65, 0x63, 0x68, 0x61, 0x74, 0x2f, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x63, 0x68, 0x61,
	0x74, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_simplechat_proto_rawDescOnce sync.Once
	file_simplechat_proto_rawDescData = file_simplechat_proto_rawDesc
)

func file_simplechat_proto_rawDescGZIP() []byte {
	file_simplechat_proto_rawDescOnce.Do(func() {
		file_simplechat_proto_rawDescData = protoimpl.X.CompressGZIP(file_simplechat_proto_rawDescData)
	})
	return file_simplechat_proto_rawDescData
}

var file_simplechat_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_simplechat_proto_goTypes = []interface{}{
	(*Conversation)(nil), // 0: simplechat.Conversation
	(*Acknowledge)(nil),  // 1: simplechat.Acknowledge
	(*User)(nil),         // 2: simplechat.User
}
var file_simplechat_proto_depIdxs = []int32{
	2, // 0: simplechat.SimpleChat.RegisterUser:input_type -> simplechat.User
	0, // 1: simplechat.SimpleChat.SendMessage:input_type -> simplechat.Conversation
	2, // 2: simplechat.SimpleChat.ReceiveMessage:input_type -> simplechat.User
	1, // 3: simplechat.SimpleChat.RegisterUser:output_type -> simplechat.Acknowledge
	1, // 4: simplechat.SimpleChat.SendMessage:output_type -> simplechat.Acknowledge
	0, // 5: simplechat.SimpleChat.ReceiveMessage:output_type -> simplechat.Conversation
	3, // [3:6] is the sub-list for method output_type
	0, // [0:3] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_simplechat_proto_init() }
func file_simplechat_proto_init() {
	if File_simplechat_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_simplechat_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Conversation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_simplechat_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Acknowledge); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_simplechat_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*User); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_simplechat_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_simplechat_proto_goTypes,
		DependencyIndexes: file_simplechat_proto_depIdxs,
		MessageInfos:      file_simplechat_proto_msgTypes,
	}.Build()
	File_simplechat_proto = out.File
	file_simplechat_proto_rawDesc = nil
	file_simplechat_proto_goTypes = nil
	file_simplechat_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// SimpleChatClient is the client API for SimpleChat service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SimpleChatClient interface {
	RegisterUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*Acknowledge, error)
	SendMessage(ctx context.Context, opts ...grpc.CallOption) (SimpleChat_SendMessageClient, error)
	ReceiveMessage(ctx context.Context, in *User, opts ...grpc.CallOption) (SimpleChat_ReceiveMessageClient, error)
}

type simpleChatClient struct {
	cc grpc.ClientConnInterface
}

func NewSimpleChatClient(cc grpc.ClientConnInterface) SimpleChatClient {
	return &simpleChatClient{cc}
}

func (c *simpleChatClient) RegisterUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*Acknowledge, error) {
	out := new(Acknowledge)
	err := c.cc.Invoke(ctx, "/simplechat.SimpleChat/RegisterUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *simpleChatClient) SendMessage(ctx context.Context, opts ...grpc.CallOption) (SimpleChat_SendMessageClient, error) {
	stream, err := c.cc.NewStream(ctx, &_SimpleChat_serviceDesc.Streams[0], "/simplechat.SimpleChat/SendMessage", opts...)
	if err != nil {
		return nil, err
	}
	x := &simpleChatSendMessageClient{stream}
	return x, nil
}

type SimpleChat_SendMessageClient interface {
	Send(*Conversation) error
	CloseAndRecv() (*Acknowledge, error)
	grpc.ClientStream
}

type simpleChatSendMessageClient struct {
	grpc.ClientStream
}

func (x *simpleChatSendMessageClient) Send(m *Conversation) error {
	return x.ClientStream.SendMsg(m)
}

func (x *simpleChatSendMessageClient) CloseAndRecv() (*Acknowledge, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Acknowledge)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *simpleChatClient) ReceiveMessage(ctx context.Context, in *User, opts ...grpc.CallOption) (SimpleChat_ReceiveMessageClient, error) {
	stream, err := c.cc.NewStream(ctx, &_SimpleChat_serviceDesc.Streams[1], "/simplechat.SimpleChat/ReceiveMessage", opts...)
	if err != nil {
		return nil, err
	}
	x := &simpleChatReceiveMessageClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type SimpleChat_ReceiveMessageClient interface {
	Recv() (*Conversation, error)
	grpc.ClientStream
}

type simpleChatReceiveMessageClient struct {
	grpc.ClientStream
}

func (x *simpleChatReceiveMessageClient) Recv() (*Conversation, error) {
	m := new(Conversation)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// SimpleChatServer is the server API for SimpleChat service.
type SimpleChatServer interface {
	RegisterUser(context.Context, *User) (*Acknowledge, error)
	SendMessage(SimpleChat_SendMessageServer) error
	ReceiveMessage(*User, SimpleChat_ReceiveMessageServer) error
}

// UnimplementedSimpleChatServer can be embedded to have forward compatible implementations.
type UnimplementedSimpleChatServer struct {
}

func (*UnimplementedSimpleChatServer) RegisterUser(context.Context, *User) (*Acknowledge, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterUser not implemented")
}
func (*UnimplementedSimpleChatServer) SendMessage(SimpleChat_SendMessageServer) error {
	return status.Errorf(codes.Unimplemented, "method SendMessage not implemented")
}
func (*UnimplementedSimpleChatServer) ReceiveMessage(*User, SimpleChat_ReceiveMessageServer) error {
	return status.Errorf(codes.Unimplemented, "method ReceiveMessage not implemented")
}

func RegisterSimpleChatServer(s *grpc.Server, srv SimpleChatServer) {
	s.RegisterService(&_SimpleChat_serviceDesc, srv)
}

func _SimpleChat_RegisterUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SimpleChatServer).RegisterUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/simplechat.SimpleChat/RegisterUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SimpleChatServer).RegisterUser(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

func _SimpleChat_SendMessage_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SimpleChatServer).SendMessage(&simpleChatSendMessageServer{stream})
}

type SimpleChat_SendMessageServer interface {
	SendAndClose(*Acknowledge) error
	Recv() (*Conversation, error)
	grpc.ServerStream
}

type simpleChatSendMessageServer struct {
	grpc.ServerStream
}

func (x *simpleChatSendMessageServer) SendAndClose(m *Acknowledge) error {
	return x.ServerStream.SendMsg(m)
}

func (x *simpleChatSendMessageServer) Recv() (*Conversation, error) {
	m := new(Conversation)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _SimpleChat_ReceiveMessage_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(User)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SimpleChatServer).ReceiveMessage(m, &simpleChatReceiveMessageServer{stream})
}

type SimpleChat_ReceiveMessageServer interface {
	Send(*Conversation) error
	grpc.ServerStream
}

type simpleChatReceiveMessageServer struct {
	grpc.ServerStream
}

func (x *simpleChatReceiveMessageServer) Send(m *Conversation) error {
	return x.ServerStream.SendMsg(m)
}

var _SimpleChat_serviceDesc = grpc.ServiceDesc{
	ServiceName: "simplechat.SimpleChat",
	HandlerType: (*SimpleChatServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterUser",
			Handler:    _SimpleChat_RegisterUser_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SendMessage",
			Handler:       _SimpleChat_SendMessage_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "ReceiveMessage",
			Handler:       _SimpleChat_ReceiveMessage_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "simplechat.proto",
}
